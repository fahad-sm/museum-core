<?php

namespace MuseumCore;

use MuseumCore\Classes\Plugin;
use MuseumCore\Classes\ThemeOptions;
use MuseumCore\Libraries\ClassLoader;
use MuseumCore\Register\PostType;
use MuseumCore\Register\Registry;

final class Loader
{
	static function init() {
		self::defines();
		self::includes();
		self::autoload();
		self::start();

		add_action('plugins_loaded', [__CLASS__, 'plugins_loaded']);
	}

	/**
	 * Defind constants.
	 * @return [type] [description]
	 */
	static function defines() {
		
	}

	/**
	 * Define autolaod
	 *
	 * @return [type] [description]
	 */
	static function autoload() {

		// autoload_psr4.php @generated by Composer
		$vendorDir = MUSEUM_CORE_PATH . 'inc';

		$psr = array(
		    'MuseumCore\\' => array($vendorDir),
		);

		$class_loader = new ClassLoader;
		foreach( $psr as $prefix => $paths) {
			$class_loader->setPsr4($prefix, $paths);
		}

		$class_loader->register();

	}

	static function includes() {
		require_once MUSEUM_CORE_PATH .'inc/Libraries/ClassLoader.php';
		require_once MUSEUM_CORE_PATH . 'inc/Functions.php';
		require_once MUSEUM_CORE_PATH . 'redux/redux-framework.php';
		require_once MUSEUM_CORE_PATH . 'inc/Elementor/Elementor.php';
	}

	/**
	 * Start the application.
	 *
	 * @return [type] [description]
	 */
	static function start() {
		Plugin::init();
	}

	/**
	 * Plugin Activation hook.
	 *
	 * @param  boolean $network_wide
	 * @return void
	 */
	public static function activate($network_wide) {
		if(class_exists('ReduxFrameworkPlugin')) {
			\ReduxFrameworkPlugin::activate($network_wide);
		}
	}

	/**
	 * Plugin deaction hook.
	 *
	 * @param  boolean $network_wide
	 * @return void
	 */
	public static function deactivate($network_wide) {
		if(class_exists('ReduxFrameworkPlugin')) {
			\ReduxFrameworkPlugin::deactivate($network_wide);
		}
	}

	/**
	 * Plugins Loaded hook.
	 *
	 * @return void
	 */
	public static function plugins_loaded() {
		load_plugin_textdomain( 'museum-core', false, plugin_basename( dirname( __FILE__ ) ) . '/languages' ); 
	}

}

Loader::init();
