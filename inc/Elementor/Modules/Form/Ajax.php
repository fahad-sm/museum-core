<?php
namespace MuseumCore\Elementor\Modules\Form;

use MuseumCore\Libraries\MailChimp;

class Ajax {
	/* form record property */
	protected $sent_data;
	protected $fields;
	protected $form_type;
	protected $form_settings;
	protected $files = [];
	protected $meta = [];

	function __construct()
	{
		self::init();
	}

	function init() {
		add_action('wp_ajax_museum_elementor_form_handler', array($this, 'handle' ) );
		add_action('wp_ajax_nopriv_museum_elementor_form_handler', array($this, 'handle' ) );
	}

	function handle() {
		// Nonce validation
		$post_id = esc_attr(student_get( $_POST, 'post_id'));
		$form_id = esc_attr(student_get($_POST, 'form_id'));
		$elementor_data = get_post_meta($post_id, '_elementor_data', true);
		$elementor_data = json_decode( $elementor_data, true );
		
		$arr = static::recursiveFindElement($elementor_data, $form_id);
 		//printr($arr);

		$record = new FormRecord( $_POST['form_fields'], $arr );
		self::run($record);
	}

	public static function recursiveFindElement( $elements, $form_id ) {
		foreach ( $elements as $element ) {
			if ( $form_id === $element['id'] ) {
				return $element;
			}

			if ( ! empty( $element['elements'] ) ) {
				$element = self::recursiveFindElement( $element['elements'], $form_id );

				if ( $element ) {
					return $element;
				}
			}
		}

		return false;
	}

	function upload_files() {
		if( ! $_FILES ) {
			return;
		}

		$files = student_get( $_FILES, 'form_fileds' );

		$return = array();

		foreach( $files['name'] as $name => $file ) {
	
			if ( ! function_exists( 'wp_handle_upload' ) ) {
			    require_once( ABSPATH . 'wp-admin/includes/file.php' );
			}
			$data = array(
				'name'	=> $files['name'][$name],
				'type'	=> $files['type'][$name],
				'tmp_name'	=> $files['tmp_name'][$name],
				'error'	=> $files['error'][$name],
				'size'	=> $files['size'][$name],
			);
			$upload_overrides = array( 'test_form' => false );

			$movefile = wp_handle_upload( $data, $upload_overrides );

			$return[] = $movefile;
			if ( $movefile && ! isset( $movefile['error'] ) ) {
			    // echo "File is valid, and was successfully uploaded.\n";
			    // var_dump( $movefile );
			} else {
			    /**
			     * Error generated by _wp_handle_upload()
			     * @see _wp_handle_upload() in wp-admin/includes/file.php
			     */
			    echo $movefile['error'];
			}
		}

		return $return;
	}
	/* start email.php content */
	public function run( $record, $ajax_handler = '' ) {

		$settings = $record->get( 'form_settings' );

		$nonce = esc_attr(student_get($_POST, '_wpnonce' ));
		if( ! wp_verify_nonce( $nonce, 'webinane_elementor_form_builder' ) ) {
			wp_send_json_error( array('message' => esc_html__('Unable to verify security check, please reload page and try again', 'museum-core')) );
		}

		$record->validate();
		if( $record->errors && ! $record->is_success ) {
			$errors = implode("<br />", $record->errors);
			wp_send_json_error( array('message' => '<p>'.$errors.'</p>' ) );
		}

		$submit_actions = student_get($settings, 'submit_actions');

		$message = '';
		if(in_array('email', $submit_actions)) {
			// $message = $this->sendEmail($record, $ajax_handler);
		}

		if(in_array('mailchimp', $submit_actions)) {
			$message .= "\n" . $this->mailchimpSubscribe($record, $ajax_handler);
		}
		
		wp_send_json_success( ['message' => $message] );
	}

	/**
	 * Send email.
	 * 
	 * @param  [type] $record       [description]
	 * @param  string $ajax_handler [description]
	 * @return [type]               [description]
	 */
	private function sendEmail($record, $ajax_handler = '') {

		// Upload files if any
		$uploaded_files = $this->upload_files();

		$send_html = 'plain' !== student_get( $settings, $this->get_control_id( 'email_content_type' ) );
		$line_break = $send_html ? '<br>' : "\n";

		$fields = [
			'email_to' => get_option( 'admin_email' ),
			/* translators: %s: Site title. */
			'email_subject' => sprintf( __( 'New message from "%s"', 'museum-core' ), get_bloginfo( 'name' ) ),
			'email_content' => '[all-fields]',
			'email_from_name' => get_bloginfo( 'name' ),
			'email_from' => get_bloginfo( 'admin_email' ),
			'email_reply_to' => 'noreplay@' .$_SERVER['HTTP_HOST'],
			'email_to_cc' => '',
			'email_to_bcc' => '',
		];
		
		foreach ( $fields as $key => $default ) {
			$setting = trim( student_get( $settings, $this->get_control_id( $key ), $default ) );
			$setting = $record->replace_setting_shortcodes( $setting );
			if ( ! empty( $setting ) ) {
				$fields[ $key ] = $setting;
			}
		}

		$email_reply_to = '';

		if ( ! empty( $fields['email_reply_to'] ) ) {
			$sent_data = $record->get( 'sent_data' );
			foreach ( $record->get( 'fields' ) as $field_index => $field ) {
				if ( $field_index === $fields['email_reply_to'] && ! empty( $sent_data[ $field_index ] ) && is_email( $sent_data[ $field_index ] ) ) {
					$email_reply_to = $sent_data[ $field_index ];
					break;
				}
			}
		}

		$fields['email_content'] = $this->replace_content_shortcodes( $fields['email_content'], $record, $line_break );

		$email_meta = '';

		$form_metadata_settings = student_get( $settings, $this->get_control_id( 'form_metadata' ) );

		foreach ( $record->get( 'meta' ) as $id => $field ) {
			if ( in_array( $id, $form_metadata_settings ) ) {
				$email_meta .= $this->field_formatted( $field ) . $line_break;
			}
		}

		if ( ! empty( $email_meta ) ) {
			$fields['email_content'] .= $line_break . '---' . $line_break . $line_break . $email_meta;
		}

		$headers = sprintf( 'From: %s <%s>' . "\r\n", $fields['email_from_name'], $fields['email_from'] );
		$headers .= sprintf( 'Reply-To: %s' . "\r\n", $email_reply_to );

		if ( $send_html ) {
			$headers .= 'Content-Type: text/html; charset=UTF-8' . "\r\n";
		}

		$cc_header = '';
		if ( ! empty( $fields['email_to_cc'] ) ) {
			$cc_header = 'Cc: ' . $fields['email_to_cc'] . "\r\n";
		}

		/**
		 * Email headers.
		 *
		 * Filters the additional headers sent when the form send an email.
		 *
		 * @since 1.0.0
		 *
		 * @param string|array $headers Additional headers.
		 */
		$headers = apply_filters( 'elementor_pro/forms/wp_mail_headers', $headers );

		/**
		 * Email content.
		 *
		 * Filters the content of the email sent by the form.
		 *
		 * @since 1.0.0
		 *
		 * @param string $email_content Email content.
		 */
		$fields['email_content'] = apply_filters( 'elementor_pro/forms/wp_mail_message', $fields['email_content'] );

		$attachments = [];
		if( $uploaded_files ) {
			foreach( $uploaded_files as $up_file) {
				if( ! isset( $up_file['error'] ) && student_get( $up_file, 'file') ) {
					$attachments[] = WP_CONTENT_DIR . student_get($up_file, 'file');
				}
			}
		}

		$email_sent = wp_mail( $fields['email_to'], $fields['email_subject'], $fields['email_content'], $headers . $cc_header, $attachments );

		if ( ! empty( $fields['email_to_bcc'] ) ) {
			$bcc_emails = explode( ',', $fields['email_to_bcc'] );
			foreach ( $bcc_emails as $bcc_email ) {
				wp_mail( trim( $bcc_email ), $fields['email_subject'], $fields['email_content'], $headers, $attachments );
			}
		}

		/**
		 * Elementor form mail sent.
		 *
		 * Fires when an email was sent successfully.
		 *
		 * @since 1.0.0
		 *
		 * @param array       $settings Form settings.
		 * @param Form_Record $record   An instance of the form record.
		 */
		do_action( 'elementor_pro/forms/mail_sent', $settings, $record );

		if ( ! $email_sent ) {
			wp_send_json_error( array( 
				'message' => student_get( $settings, 'invalid_message', __( 'There\'s something wrong. The form is invalid.', 'museum-core' ) ),
			), 403 );
		}
		
		return __( 'The form was sent successfully.', 'museum-core' );
	}

	/**
	 * [mailchimpSubscribe description]
	 *
	 * @param  [type] $record       [description]
	 * @param  string $ajax_handler [description]
	 * @return [type]               [description]
	 */
	private function mailchimpSubscribe($record, $ajax_handler = '') {
		$sent_data = $record->get('sent_data');
		$email = student_get( $sent_data, 'email' );

		if( ! $email ) {
			wp_send_json_error( ['message' => esc_html__('Email is not provided', 'museum-core')], 403 );
		}

		$key = studentwp()->options->get('mailchimp_api_key');

		$MailChimp = new MailChimp($key);

		$list_id = studentwp()->options->get('mailchimp_api_list');

		$result = $MailChimp->post("lists/$list_id/members", [
				'email_address' => $email,
				'status'        => 'subscribed',
			]);

		try {
			if ($MailChimp->success()) {
				$merge_fields = [];
				foreach($sent_data as $field_name => $field_value) {
					if($field_name != 'email' && $field_value) {
						$merge_fields[$field_name] = $field_value;
					}
				}
				if($merge_fields) {

					// Now process extra fields.
					$subscriber_hash = MailChimp::subscriberHash($email);

					try {
						$result = $MailChimp->patch("lists/$list_id/members/$subscriber_hash", [
							'merge_fields' => $merge_fields
						]);

						if ( ! $MailChimp->success() ) {
							wp_send_json_error(['message' => $MailChimp->getLastError()], 403);
						}
					} catch (\Exception $e) {
						wp_send_json_error(['message' => $e->getMessage()], 403);
					}
				}

				return $result;
			} else {
				wp_send_json_error(['message' => $MailChimp->getLastError()], 403);
			}
		} catch (\Exception $e) {
			wp_send_json_error(['message' => $e->getMessage()], 403);
		}
	}

	private function field_formatted( $field ) {
		$formatted = '';
		if ( ! empty( $field['title'] ) ) {
			$formatted = sprintf( '%s: %s', $field['title'], $field['value'] );
		} elseif ( ! empty( $field['value'] ) ) {
			$formatted = sprintf( '%s', $field['value'] );
		}

		return $formatted;
	}

	// Allow overwrite the control_id with a prefix, @see Email2
	protected function get_control_id( $control_id ) {
		return $control_id;
	}

	/**
	 * @param string      $email_content
	 * @param Form_Record $record
	 *
	 * @return string
	 */
	private function replace_content_shortcodes( $email_content, $record, $line_break ) {
		$email_content = do_shortcode( $email_content );
		$all_fields_shortcode = '[all-fields]';

		if ( false !== strpos( $email_content, $all_fields_shortcode ) ) {
			$text = '';
			foreach ( $record->get( 'fields' ) as $field ) {
				$formatted = $this->field_formatted( $field );
				if ( ( 'textarea' === $field['type'] ) && ( '<br>' === $line_break ) ) {
					$formatted = str_replace( [ "\r\n", "\n", "\r" ], '<br />', $formatted );
				}
				$text .= $formatted . $line_break;
			}

			$email_content = str_replace( $all_fields_shortcode, $text, $email_content );

		}

		return $email_content;
	}

	/* end email.php content */
}
